// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: ticker.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';

export const protobufPackage = 'ticker';

export interface TickerRequest {
  symbol: string;
}

export interface TickerAck {
  symbol: string;
}

function createBaseTickerRequest(): TickerRequest {
  return { symbol: '' };
}

export const TickerRequest: MessageFns<TickerRequest> = {
  encode(
    message: TickerRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.symbol !== '') {
      writer.uint32(10).string(message.symbol);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TickerRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TickerRequest {
    return {
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : '',
    };
  },

  toJSON(message: TickerRequest): unknown {
    const obj: any = {};
    if (message.symbol !== '') {
      obj.symbol = message.symbol;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TickerRequest>, I>>(
    base?: I,
  ): TickerRequest {
    return TickerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TickerRequest>, I>>(
    object: I,
  ): TickerRequest {
    const message = createBaseTickerRequest();
    message.symbol = object.symbol ?? '';
    return message;
  },
};

function createBaseTickerAck(): TickerAck {
  return { symbol: '' };
}

export const TickerAck: MessageFns<TickerAck> = {
  encode(
    message: TickerAck,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.symbol !== '') {
      writer.uint32(10).string(message.symbol);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TickerAck {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickerAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TickerAck {
    return {
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : '',
    };
  },

  toJSON(message: TickerAck): unknown {
    const obj: any = {};
    if (message.symbol !== '') {
      obj.symbol = message.symbol;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TickerAck>, I>>(base?: I): TickerAck {
    return TickerAck.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TickerAck>, I>>(
    object: I,
  ): TickerAck {
    const message = createBaseTickerAck();
    message.symbol = object.symbol ?? '';
    return message;
  },
};

export interface TickerService {
  Subscribe(request: TickerRequest): Promise<TickerAck>;
  UnSubscribe(request: TickerRequest): Promise<TickerAck>;
}

export const TickerServiceServiceName = 'ticker.TickerService';
export class TickerServiceClientImpl implements TickerService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || TickerServiceServiceName;
    this.rpc = rpc;
    this.Subscribe = this.Subscribe.bind(this);
    this.UnSubscribe = this.UnSubscribe.bind(this);
  }
  Subscribe(request: TickerRequest): Promise<TickerAck> {
    const data = TickerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Subscribe', data);
    return promise.then((data) => TickerAck.decode(new BinaryReader(data)));
  }

  UnSubscribe(request: TickerRequest): Promise<TickerAck> {
    const data = TickerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'UnSubscribe', data);
    return promise.then((data) => TickerAck.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
